Add-on to BoaTester supporting selenium based test of web applications.

<wiki:toc max_depth="4" />

= Introduction =

Selenium: http://seleniumhq.org/ is grown-up and well known framework for testing web applications. During my work with that framework I came to the conclusion that test steps written as sequence of python statement is not a good idea and decided to create a simple extension to the selenium which replaces this part of test with simple text file.

= General idea ==

== Test steps ==

The purpose is to replace sequence of python statements like:
{{{
        self.assertTrue(sel.is_element_present("id=ACCEPT"),"Element not found")
        self.assertTrue(sel.is_element_present("xpath=//option[@value='hotel']"),"Element not found")
        sel.click("id=ACCEPT")
        sel.type("PASSWORD", "osoba")
        sel.type("LOGINNAME, "osoba")
        sel.click("id=ACCEPT")
        self.assertTrue(sel.is_element_present("xpath=//td[@class='user']//div[text()='osoba']"),"Element not found"
 }}}

with something like (lines from text file):
{{{
[testcase1]
waitFor : #ACCEPT
waitFor : xpath=//option[@value='hotel']|20
-- Test Case 1
-- Click on 'Accept' and error 'Login name is empty' is expected
click : #ACCEPT
mouseOver : #PASSWORD
-- Test Case 2
-- enter osoba and osoba as login name and password and click 'Accept'
-- login should be done and 'osoba' login name should appeat at the top panel
type : #LOGINNAME|osoba
type : #PASSWORD|osoba
click : #ACCEPT
waitFor : xpath=//td[@class='user']//div[text()='osoba']
}}}

and python statement:

{{{
   runtest['testcase']
}}}

== Aliases ==

Some elements (for instance button) are used more than once. So aliases are necessary in order to avoid typing exact element selector (for instance "id=ACCEPT") and use alias name (#ACCEPT) instead. No problem with simple selector identifier but in case of complicated identifier ("xpath=//div[2][text='aaa']//td ...") it could save time and lower the risk of inproper typing. Also in case of changing the element identifiers - very likely after changing the screen layout - it is enough to change only the alias definition thus leaving the test steps related to this element unchanged.

== Common elements ==

Very often test cases are sharing some common test elements and definitions. For instance:

Test Case 1:
{{{
Login to the application
Run test scenario 1
}}}

Test Case 2:
{{{
Login to the application
Run test scenario 2
}}}

In order to avoid duplicating the same login sequence it is necessary to create a simple 'common' resource containing reusable elements.

== Keep it simple ==

The purpose is to simplify only one aspect of running selenium test in python. The purpose is not to cover all selenium or to create another test framework. So there is no automation for starting selenium server, opening and starting selenium main object. The test case can be also partially automated by this extension, it is possible to run one fragment of test steps by this automation and the rest by the regular python module.

Only a subset of selenium command is covered. But it is very simple to extend this subset by adding more commands.

= Details =

== SeleniumHelper file ==

=== General information ===

The resource used by SeleniumHelper is simple text file divided into different section identified by [section name] tag.

=== The file structure ===

The general structure is as follows:

{{{
[alias]
.. alial section ..
[test name 1]
.. test step for 'test name1' 
[test name 2]
.. test steps for 'test name 2'
[.....]
etc
}}}

Blank lines are ignored. Comment is a line starting with --. For example:

{{{
[test1]
-- Test Case scenario:
-- Test steps:
-- Login as U/P person/tosecret
-- Verification:
-- Login passed
type : #LOGINNAME|person
..
}}}

===Alias section===

Everything between [alias] and the next section or the end of file. Only one alias section is allowed or there could be no any alias section at all.

[alias]

alias id1 : alias definition 1
alias id2 : alias definition 2
....
end of file or the next section

Definition of one alias

alias1 : definition of alias

Example:
{{{
[alias]
ACCEPT : id=ACCEPT
PASSWORD : PASSWORD
LOGINNAME : LOGINNAME

[test]
...
}}}

Here we have three aliases: ACCEPT with definition 'id=ACCEPT', PASSWORD with defintion 'PASSWORD' and LOGINNAME as 'LOGINNAME'.

Trailing spaces for identifier and definition are removed. So
{{{
ACCEPT : id=ACCEPT
 ACCEPT   :id=ACCEPT

ACCEPT   :    id=ACCEPT
}}}
describe the same alias.

=== Test steps section ===

==== General =====

Everything from [test name] to the next section or to the end of file. Test name cannot be 'alias'. Test steps contain series of lines describing one test step. Steps are executed in top-bottom order. In case of an error or verification failure exception is raised. Verification failure raises 'unittest' failure : (http://docs.python.org/library/unittest.html)

{{{
[test name 1]
actionid : parameter1|parameter2| ... | parametern
.....
next section or the end of file
}}}

==== Test step line ====

actionid : parameter1|parameter2| ... | parametern

Test step name and zero, one or more parameters separated by | character.

For instance:

{{{
waitFor : xpath=//option[@value='hotel']|20
}}}

Test step name is *waitFor* and it is used with two parameters *  xpath=//option[@value='hotel']" and *20*

Important: spaces are significant. In this example it space at the beginning of the first parameter does not make any difference but in case of typing form values it could make difference.

==== List of action defined ====
